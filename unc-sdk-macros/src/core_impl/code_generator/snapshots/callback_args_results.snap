---
source: unc-sdk-macros/src/core_impl/code_generator/item_impl_info.rs
assertion_line: 170
expression: pretty_print_syn_str(&actual).unwrap()
---
#[cfg(target_arch = "wasm32")]
#[no_mangle]
pub extern "C" fn method() {
    ::unc_sdk::env::setup_panic_hook();
    if ::unc_sdk::env::current_account_id() != ::unc_sdk::env::predecessor_account_id() {
        ::unc_sdk::env::panic_str("Method method is private");
    }
    let mut x: Result<u64, PromiseError> = match ::unc_sdk::env::promise_result(0u64) {
        ::unc_sdk::PromiseResult::Successful(data) => {
            ::std::result::Result::Ok(
                ::unc_sdk::serde_json::from_slice(&data)
                    .expect("Failed to deserialize callback using JSON"),
            )
        }
        ::unc_sdk::PromiseResult::Failed => {
            ::std::result::Result::Err(::unc_sdk::PromiseError::Failed)
        }
    };
    let y: Result<::std::string::String, PromiseError> = match ::unc_sdk::env::promise_result(
        1u64,
    ) {
        ::unc_sdk::PromiseResult::Successful(data) => {
            ::std::result::Result::Ok(
                ::unc_sdk::serde_json::from_slice(&data)
                    .expect("Failed to deserialize callback using JSON"),
            )
        }
        ::unc_sdk::PromiseResult::Failed => {
            ::std::result::Result::Err(::unc_sdk::PromiseError::Failed)
        }
    };
    let contract: Hello = ::unc_sdk::env::state_read().unwrap_or_default();
    contract.method(&mut x, y);
}
